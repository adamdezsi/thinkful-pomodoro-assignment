{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cfedd\\\\Documents\\\\code\\\\pomodoro\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState, setState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { secondsToDuration, minutesToDuration } from \"../utils/duration\";\nimport Controller from \"./Controller\";\nimport ProgressBar from \"./ProgressBar\";\nimport TimeMachine from \"./TimeMachine\";\nimport Remaining from \"./Remaining\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [timeRemaining, setTimeRemaining] = useState(focusDuration * 60);\n  const [isSessionActive, setIsSessionActive] = useState(false);\n  const [mode, setMode] = useState(\"focus\");\n  useInterval(() => {\n    if (timeRemaining === 0) {\n      new Audio(`https://assets.mixkit.co/sfx/preview/mixkit-musical-reveal-961.mp3`).play();\n\n      if (mode === \"focus\") {\n        setMode(\"break\");\n        setTimeRemaining(breakDuration * 60);\n        return;\n      } else {\n        setMode(\"focus\");\n        setTimeRemaining(focusDuration * 60);\n        return;\n      }\n    }\n\n    setTimeRemaining(prevTime => prevTime - 1);\n  }, isTimerRunning ? 1000 : null);\n\n  function playPause() {\n    setIsTimerRunning(prevState => !prevState);\n  }\n\n  function stop() {\n    setIsTimerRunning(false);\n\n    if (mode === \"focus\") {\n      setTimeRemaining(focusDuration * 60);\n    } else {\n      setTimeRemaining(breakDuration * 60);\n    }\n\n    setMode(\"focus\");\n  }\n\n  const decreaseFocus = () => {\n    const newFocus = focusDuration - 5;\n    setFocusDuration(newFocus);\n    setTimeRemaining(newFocus * 60);\n  };\n\n  const increaseFocus = () => {\n    setFocusDuration(prevFocus => {\n      const newFocus = prevFocus + 5;\n      setTimeRemaining(newFocus * 60);\n      return newFocus;\n    });\n  };\n\n  const decreaseBreak = () => {\n    setBreakDuration(lastBreak => lastBreak - 1);\n  };\n\n  const increaseBreak = () => {\n    setBreakDuration(lastBreak => lastBreak + 1);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TimeMachine, {\n    focusDuration: focusDuration,\n    minutesToDuration: minutesToDuration,\n    decreaseFocus: decreaseFocus,\n    isTimerRunning: isTimerRunning,\n    increaseFocus: increaseFocus,\n    breakDuration: breakDuration,\n    decreaseBreak: decreaseBreak,\n    increaseBreak: increaseBreak,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Controller, {\n    playPause: playPause,\n    isTimerRunning: isTimerRunning,\n    stop: stop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Remaining, {\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    mode: mode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, secondsToDuration(timeRemaining), \" remaining\"))), /*#__PURE__*/React.createElement(ProgressBar, {\n    mode: mode,\n    timeRemaining: timeRemaining,\n    breakDuration: breakDuration,\n    focusDuration: focusDuration,\n    minutesToDuration: minutesToDuration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/cfedd/Documents/code/pomodoro/src/pomodoro/Pomodoro.js"],"names":["React","useState","setState","classNames","useInterval","secondsToDuration","minutesToDuration","Controller","ProgressBar","TimeMachine","Remaining","Pomodoro","isTimerRunning","setIsTimerRunning","focusDuration","setFocusDuration","breakDuration","setBreakDuration","timeRemaining","setTimeRemaining","isSessionActive","setIsSessionActive","mode","setMode","Audio","play","prevTime","playPause","prevState","stop","decreaseFocus","newFocus","increaseFocus","prevFocus","decreaseBreak","lastBreak","increaseBreak"],"mappings":"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","sourcesContent":["import React, { useState, setState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { secondsToDuration, minutesToDuration } from \"../utils/duration\";\nimport Controller from \"./Controller\";\nimport ProgressBar from \"./ProgressBar\";\nimport TimeMachine from \"./TimeMachine\";\nimport Remaining from \"./Remaining\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [timeRemaining, setTimeRemaining] = useState(focusDuration * 60);\n  const [isSessionActive, setIsSessionActive] = useState(false)\n  const [mode, setMode] = useState(\"focus\");\n\n  useInterval(\n    () => {\n      if (timeRemaining === 0) {\n        new Audio(\n          `https://assets.mixkit.co/sfx/preview/mixkit-musical-reveal-961.mp3`\n        ).play();\n        if (mode === \"focus\") {\n          setMode(\"break\");\n          setTimeRemaining(breakDuration * 60);\n\n          return;\n        } else {\n          setMode(\"focus\");\n          setTimeRemaining(focusDuration * 60);\n\n          return;\n        }\n      }\n      setTimeRemaining((prevTime) => prevTime - 1);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function playPause() {\n    setIsTimerRunning((prevState) => !prevState);\n  }\n\n  function stop() {\n    setIsTimerRunning(false);\n    if (mode === \"focus\") {\n      setTimeRemaining(focusDuration * 60);\n    } else {\n      setTimeRemaining(breakDuration * 60);\n    }\n    setMode(\"focus\");\n  }\n\n  const decreaseFocus = () => {\n    const newFocus = focusDuration - 5;\n    setFocusDuration(newFocus);\n    setTimeRemaining(newFocus * 60);\n  };\n\n  const increaseFocus = () => {\n    setFocusDuration((prevFocus) => {\n      const newFocus = prevFocus + 5;\n      setTimeRemaining(newFocus * 60);\n      return newFocus;\n    });\n  };\n\n  const decreaseBreak = () => {\n    setBreakDuration((lastBreak) => lastBreak - 1);\n  };\n\n  const increaseBreak = () => {\n    setBreakDuration((lastBreak) => lastBreak + 1);\n  };\n\n  return (\n    <div className=\"pomodoro\">\n      <TimeMachine\n        focusDuration={focusDuration}\n        minutesToDuration={minutesToDuration}\n        decreaseFocus={decreaseFocus}\n        isTimerRunning={isTimerRunning}\n        increaseFocus={increaseFocus}\n        breakDuration={breakDuration}\n        decreaseBreak={decreaseBreak}\n        increaseBreak={increaseBreak}\n      />\n      <div className=\"row\">\n        <div className=\"col\">\n          <Controller\n            playPause={playPause}\n            isTimerRunning={isTimerRunning}\n            stop={stop}\n          />\n        </div>\n      </div>\n      <div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <Remaining\n              focusDuration={focusDuration}\n              breakDuration={breakDuration}\n              mode={mode}\n            />\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              {secondsToDuration(timeRemaining)} remaining\n            </p>\n          </div>\n        </div>\n        <ProgressBar\n          mode={mode}\n          timeRemaining={timeRemaining}\n          breakDuration={breakDuration}\n          focusDuration={focusDuration}\n          minutesToDuration={minutesToDuration}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}